// Generated by CoffeeScript 1.8.0
(function() {
  var deep, _;

  _ = require('lodash');

  deep = require('object-path');

  _.pluck = function(items, pluck) {
    var pluckMany;
    if (!(_.isObject(items) && pluck)) {
      return items;
    }
    pluckMany = function(item) {
      var newObj;
      if (_.isString(pluck)) {
        return deep.get(item, pluck);
      }
      newObj = {};
      _.each(pluck, function(copyKey, setKey) {
        var newKey;
        newKey = _.isString(setKey) ? setKey : copyKey;
        return deep.set(newObj, newKey, deep.get(item, copyKey));
      });
      return newObj;
    };
    if (_.isArray(items)) {
      items = _.map(items, pluckMany);
    } else if (_.isObject(items)) {
      items = pluckMany(items);
    }
    return items;
  };

  _.move = function(item, oldPath, newPath) {
    deep.set(item, newPath, deep.get(item, oldPath, newPath));
    deep.del(item, oldPath);
    return item;
  };

  _.rename = function(item, rename) {
    if (!(_.isObject(rename) && _.isObject(item))) {
      return item;
    }
    _.each(rename, (function(_this) {
      return function(newKey, oldKey) {
        item = _this.move(item, oldKey, newKey);
      };
    })(this));
    return item;
  };

  _.clean = function(item) {
    if (!_.isObject(item)) {
      return item;
    }
    _.each(item, function(value, id) {
      if (_.isString(value) && _.isEmpty(value)) {
        delete item[id];
      } else if (value === null) {
        delete item[id];
      } else if (_.isArray(value) && _.isEmpty(_.compact(value))) {
        delete item[id];
      } else if (_.isObject(value) && !(value instanceof Date) && _.isEmpty(value)) {
        delete item[id];
      }
    });
    return item;
  };

  _.without = function(items, without) {
    if (_.isString(without)) {
      without = [without];
    }
    if (_.isArray(items)) {
      items = _.map(items, (function(_this) {
        return function(item) {
          return _this.without(item, without);
        };
      })(this));
    } else if (_.isObject(items)) {
      _.each(without, function(rmPath) {
        return deep.del(items, rmPath);
      });
    }
    return items;
  };

  module.exports = _;

}).call(this);
